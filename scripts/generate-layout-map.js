const fs = require('fs');
const path = require('path');
const chokidar = require('chokidar');

/*
  LAYOUT MAP GENERATION
  Generates the /src/temp/componentFactory.js file which maps React components
  to JSS components.

  The layout map is a mapping between a string name and a React component instance.
  The name corespond to the layout item name in Sitecore.

  The default convention uses the parent folder name as the component name,
  but it is customizable in generateLayoutMap().

  NOTE: this script can run in two modes. The default mode, the component factory file is written once.
  But if `--watch` is a process argument, the component factory source folder will be watched,
  and the layoutMap.js rewritten on added or deleted files.
  This is used during `jss start` to pick up new or removed components at runtime.
*/

/* eslint-disable no-console */

const LayoutMapPath = path.resolve('src/temp/layoutMap.js');
const layoutRootMap = 'src/layouts';

const isWatch = process.argv.some((arg) => arg === '--watch');

if (isWatch) {
  watchLayoutMap();
} else {
  writeLayoutMap();
}

function watchLayoutMap() {
  console.log(`Watching for changes to layout map sources in ${layoutRootMap}...`);

  chokidar
    .watch(layoutRootMap, { ignoreInitial: true, awaitWriteFinish: true })
    .on('add', writeLayoutMap)
    .on('unlink', writeLayoutMap);
}

function writeLayoutMap() {
  const layoutMap = generateLayoutMap();

  console.log(`Writing layout map to ${LayoutMapPath}`);

  fs.writeFileSync(LayoutMapPath, layoutMap, { encoding: 'utf8' });
}

function generateLayoutMap() {
  // by convention, we expect to find React layouts
  // * under /src/layouts/layoutName/
  // * with an index.js under the folder to define the component
  // If you'd like to use your own convention, encode it below.
  // NOTE: generating the layout map is also totally optional,
  // and it can be maintained manually if preferred.

  const imports = [];
  const registrations = [];

  fs.readdirSync(layoutRootMap).forEach((layoutFolder) => {
    const componentFolderFullPath = path.join(layoutRootMap, layoutFolder);

    if (
      fs.existsSync(path.join(componentFolderFullPath, 'index.js')) ||
      fs.existsSync(path.join(componentFolderFullPath, 'index.jsx'))
    ) {
      const importVarName = layoutFolder.replace(/[^\w]+/g, '');

      console.debug(`Registering JSS layout ${layoutFolder}`);
      imports.push(`import ${importVarName} from '../layouts/${layoutFolder}';`);
      registrations.push(`layouts.set('${layoutFolder}', ${importVarName});`);
    }
  });

  return `/* eslint-disable */
// Do not edit this file, it is auto-generated at build time!
// See scripts/generate-layout-map.js to modify the generation of this file.
${imports.join('\n')}

const layouts = new Map();
${registrations.join('\n')}

export default layouts;
`;
}
